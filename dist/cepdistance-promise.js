"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=_default;var _cepDistance=_interopRequireDefault(require("./errors/cep-distance"));var _distanceBetweenTwoCoords=_interopRequireDefault(require("./utils/distanceBetweenTwoCoords"));var _nodeFetch=_interopRequireDefault(require("node-fetch"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const url="https://nominatim.openstreetmap.org/search";const options={method:"GET",headers:{"User-Agent":"cepdistance"}};async function _default(data){return Promise.resolve(data).then(validateDataObject).then(validateTypes).then(transformCEPs).then(validateLengths).then(fetchCoords).then(calculateDistance).catch(error=>{throw error})}function calculateDistance({lat1,long1,lat2,long2}){return Math.ceil((0,_distanceBetweenTwoCoords.default)(lat1,long1,lat2,long2))}async function fetchCoords(data){const{lat:lat1,long:long1}=await fetchCoord(data.cep1);const{lat:lat2,long:long2}=await fetchCoord(data.cep2);return{lat1,long1,lat2,long2}}async function fetchCoord(cep){return(0,_nodeFetch.default)(`${url}?postalcode=${cep}&format=json`,options).then(parseResponse).then(getCepLatLong).catch(error=>{throw error})}async function parseResponse(response){if(!response.ok||response.status!==200)throw new _cepDistance.default({type:"fetch_error",message:"Ocorreu um erro inesperado ao tentar pegar as informa\xE7\xF5es desse CEP"});const json=await response.json();if(json.length===0)throw new _cepDistance.default({type:"fetch_error",message:"CEP n\xE3o encontrado"});return json[0]}function getCepLatLong({lat,lon:long}){return{lat,long}}function validateDataObject(data){if(data.cep1&&data.cep2)return data;throw new _cepDistance.default({type:"validation_error",message:"Informe os valores 'cep1' e 'cep2'."})}function validateTypes(data){if(typeof data.cep1==="string"&&typeof data.cep2==="string")return data;throw new _cepDistance.default({type:"validation_error",message:"Os CEPs tem de ser uma String"})}function transformCEPs(data){return{cep1:data.cep1.replace(/\D+/g,""),cep2:data.cep2.replace(/\D+/g,"")}}function validateLengths(data){if(data.cep1.length===8&&data.cep2.length===8)return data;throw new _cepDistance.default({type:"validation_error",message:"Os CEPs tem de ter exatamente 8 d\xEDgitos (Ex.: 12345678)."})}